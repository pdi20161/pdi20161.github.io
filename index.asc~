:source-highlighter: pygments
:stem:

= DCA0445: Processamento Digital de Imagens (Resolução de Exercícios)
:toc: left
:toc-title: Sumário

Exercícios disponíveis link:http://agostinhobritojr.github.io/tutoriais/pdi/[aqui].

Leandro Albino <leandroalbinof@gmail.com> +
Maykon Ricardo <ricardo.maykon@gmail.com>

== 1. Exercícios da Unidade 1

=== 1.1 Questão 1

Inicialmente o programa link:codigos/regions.cpp[regions.cpp], mostrado na <<exa_regions>>,
solicita ao usuário duas coordenadas (x y) referentes aos pontos P1 e P2 localizados dentro
dos limites do tamanho da imagem. Em seguida é feito dois for's para percorrer as colunas (x) e
linhas (y) dentro da região definida pelo retângulo de vértices opostos formado por P1 e P2 e
, dentro desse loop, é feito o negativo da imagem que consiste na diferença entre o tom 255
e o tom específico do pixel em questão.

A saída do programa _regions_, para entradas (20 40) e (100 150), é mostrado na <<fig_regions>>.

[[fig_regions, Figura 1]]
//[.text-center]
.Saída do programa regions
image::imagens/regions_saida.png[Saida do programa regions, title="Saída do programa regions"]

[[exa_regions, Listagem 1]]
[source,cpp]
.Listagem 1 : regions.cpp
----
include::codigos/regions.cpp[regions.cpp]
----

=== 1.2 Questão 2

No programa abaixo foi gerado um vetor com quatro elementos do tipo Rect, onde foi armazenado os pontos iniciais e comprimento e largura de cada retângulo onde as imagens serão inseridas na imagem original. Em seguida dividimos a imagem em quatro partes usando o construtor da classe Mat, depois de capturada as imagens sorteamos aleatoriamente o valor do vetor Rect e adicionamos na nova imagem usando o copyTo.

[source,cpp]
.Listagem 2 : trocaregioes.cpp
----
include::codigos/trocaregioes.cpp[trocaregioes.cpp]
----

=== 1.3 Questão 3


=== 1.4 Questão 4
Inicialmente foi inserido uma borda na cor "255" com objetivo de conectar as bolhas localizadas nos limites da imagem, com isso usamos o floodfill para remover essas bolhas agora conectadas. Em seguida rotulamos o fundo da imagem igual a "1" e as bolhas com rotulos a partir de "2", depois de rotulado todas as bolhas verificamos se ainda existe algum fundo com a cor "0", caso exista, denominamos esse capo como um furo e apagamos o furo e a bolha a quem pertence esse furo, caso exista um furo mas não exista bolha ao redor o programa não contabilizara o furo.
[source,cpp]
.Listagem 3 : labeling.cpp
----
include::codigos/labeling.cpp[labeling.cpp]
----

=== 1.5 Questão 5

[source,cpp]
.Listagem 4 : equalize.cpp
----
include::codigos/equalize.cpp[equalize.cpp]
----

=== 1.6 Questão 6

[source,cpp]
.Listagem 4 : motiondetector.cpp
----
include::codigos/motiondetector.cpp[motiondetector.cpp]
----
