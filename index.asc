:source-highlighter: pygments
:stem:

= DCA0445: Processamento Digital de Imagens (Resolução de Exercícios)
:toc: left
:toc-title: Sumário

Exercícios disponíveis link:http://agostinhobritojr.github.io/tutoriais/pdi/[aqui].

Leandro Albino <leandroalbinof@gmail.com> +
Maykon Ricardo <ricardo.maykon@gmail.com>

== 1. Exercícios da Unidade 1

=== 1.1 Questão 1

Inicialmente o programa link:codigos/regions.cpp[regions.cpp], mostrado na <<exa_regions>>,
solicita ao usuário duas coordenadas (x y) referentes aos pontos P1 e P2 localizados dentro
dos limites do tamanho da imagem. Em seguida é feito dois for's para percorrer as colunas (x) e
linhas (y) dentro da região definida pelo retângulo de vértices opostos formado por P1 e P2 e
, dentro desse loop, é feito o negativo da imagem que consiste na diferença entre o tom 255
e o tom específico do pixel em questão.

A saída do programa _regions_, para entradas (20 40) e (100 150), é mostrado na <<fig_regions>>.

[[fig_regions, Figura 1]]
//[.text-center]
.Saída do programa regions
image::imagens/regions_saida.png[Saida do programa regions, title="Saída do programa regions"]

A seguir o códio regions.cpp.

[[exa_regions, Listagem 1]]
[source,cpp]
.Listagem 1 : regions.cpp
----
include::codigos/regions.cpp[regions.cpp]
----

=== 1.2 Questão 2

No trecho de código a seguir, recortamos a imagem original em quatro partes iguais utilizando o construtor Mat
e atribuimos às variáveis. O construtor que utilizamos para o recorte recebe a imagem a ser recortada e a janela
de recorte que é definida pela função Rect. Os dois primeiros argumentos da função Rect formam o ponto (x,y) inicial
da imagem a ser recortada e os dois últimos argumentos representam o tamanho da janela a ser recortada. A ordem de
recorte foi a seguinte: metade superior esquerda, superior direita, inferior esquerda e inferior direita.

Clonamos a imagem original para a variável _newimage_ para ser usada na hora de colar os pedaços recortados e
embaralhados.

[[exa_laplgauss, trocaregioes_parte1]]

[source,cpp]
----
include::codigos/trocaregioes_parte1.cpp[trocaregioes_parte1.cpp]
----

Neste outro trecho, foi gerado um vetor _alea_ com quatro elementos do tipo Rect, onde foi armazenado
os pontos iniciais e comprimento e largura de cada retângulo onde as imagens recortadas serão inseridas
em _newimage_. Cada elemento corresponte a uma das quatro regioẽs divididas.

[[exa_laplgauss, trocaregioes_parte2]]

[source,cpp]
----
include::codigos/trocaregioes_parte2.cpp[trocaregioes_parte2.cpp]
----

A seguir, sorteamos aleatoriamente elementos do array _foo_ e colocando-os no vetor _aleint_.

[[exa_laplgauss, trocaregioes_parte3]]

[source,cpp]
----
include::codigos/trocaregioes_parte3.cpp[trocaregioes_parte3.cpp]
----

Por último, utilizamos os valores aleatórios do vetor _aleint_ para definir em qual posição do vetor _alea_
 cada recorte ficará e consequentemente definindo sua posição em _newimage_. Por último usamos o copyTo para
 fazer a colagem em _newimage_.

[[exa_laplgauss, trocaregioes_parte4]]

[source,cpp]
----
include::codigos/trocaregioes_parte4.cpp[trocaregioes_parte4.cpp]
----

A seguir mostramos algumas saídas para o programa _trocaregioes_, mostrado na <<exa_trocaRegions>>.

[[fig_trocaregioes, Figura 2]]
//[.text-center]
.Saída 1 do programa trocaregioes
image::imagens/trocaregioes_saida1.png[Saída 1 do programa trocaregioes, title="Saída 1 do programa trocaregioes"]

[[fig_trocaregioes2, Figura 3]]
//[.text-center]
.Saída 2 do programa trocaregioes
image::imagens/trocaregioes_saida2.png[Saída 2 do programa trocaregioes, title="Saída 2 do programa trocaregioes"]

[[fig_trocaregioes3, Figura 4]]
//[.text-center]
.Saída 3 do programa trocaregioes
image::imagens/trocaregioes_saida3.png[Saída 3 do programa trocaregioes, title="Saída 3 do programa trocaregioes"]

O código completo _trocaregions_ é mostrado a seguir.

[[exa_trocaRegions, Listagem 2]]
[source,cpp]
.Listagem 2 : trocaregioes.cpp
----
include::codigos/trocaregioes.cpp[trocaregioes.cpp]
----

=== 1.3 Questão 3

No programa _labeling.cpp_, é possível verificar que caso existam mais de 255 na cena, o processo de rotulação
ficará comprometido, pois ele está usando o tipo _uchar_ para a representação da imagem e como esse tipo possui
somente 8 bits, a quantidade máxima de tons de cinza que ela conseguirá reproduzir será 255 (2^8-1). Para resolver
esse problema de limitação a 255 objetos, podemos simplesmente alterar o tipo da matriz da imagem que iremos
trabalhar. Podemos usar o tipo int que é representado por 16 bits e dará um range de contagem de 65536 objetos. Ou o
tipo float que é representado por 32 bits e dará um range de contagem de 4294967296 objetos.

Obviamente, a exibição deste tipo de imagem ficará comprometida, pois os monitores e
impressoras atuais não são capazes de reproduzir essa quantidade de cores, nem o olho humano é capaz de distinguir
todas elas. No entanto, computacionalmente falando não haverá nenhum problema para o processo de rotulação e
manipulação da matriz da imagem.

=== 1.4 Questão 4
Para resolver esse problema inicialmente foi inserido uma borda na cor "255" com objetivo de conectar as bolhas localizadas nos limites da imagem, com isso usamos o floodfill para remover essas bolhas
agora conectadas.

[[exa_labeling, labeling_parte1]]

[source,cpp]
----
include::codigos/labeling_parte1.cpp[labeling_parte1.cpp]
----

Em seguida rotulamos o fundo da imagem igual a "1" e as bolhas com rótulos a partir de "2".

[[exa_labeling, labeling_parte2]]

[source,cpp]
----
include::codigos/labeling_parte2.cpp[labeling_parte2.cpp]
----

Depois de rotulado todas as bolhas, verificamos se ainda existe algum fundo com a cor "0"; caso exista, denominamos esse campo como um furo e apagamos o furo e a bolha ao redor desse furo. Caso exista um furo, mas não exista bolha ao redor o programa não contabilizara o furo.

[[exa_labeling, labeling_parte3]]

[source,cpp]
----
include::codigos/labeling_parte3.cpp[labeling_parte3.cpp]
----

As imagens a seguir mostra os passos realizados pelo algoritmo.

[[fig_labeling, Figura 5]]
//[.text-center]
.Saída do programa _labeling.cpp_
image::imagens/bolhas_saida.png[Saída do programa _labeling.cpp_ , title="Saída do programa _labeling.cpp_"]


Em seguida o programa completo.

[source,cpp]
.Listagem 3 : labeling.cpp
----
include::codigos/labeling.cpp[labeling.cpp]
----

=== 1.5 Questão 5

Para equalização de imagem, inicialmente foi capturada um frame do video e dividida nos canais R, G e B, logo em seguida foi utilizado o metodo "equalizeHist" em cada canal da imagem e depois é dado um merge para juntar os canais na imagem novamente.

[[exa_equalize, equalize_parte1]]

[source,cpp]
----
include::codigos/equalize_parte1.cpp[equalize_parte1.cpp]
----

A seguir uma aplicação mais completa utilizando esse código e com a demostração do histograma.

[source,cpp]
.Listagem 4 : equalize.cpp
----
include::codigos/equalize.cpp[equalize.cpp]
----

=== 1.6 Questão 6

Inicialmente para analizarmos a movimentação no video foi necessário calcular os histogramas de cada frame do video, utilizando o código abaixo.

[[exa_motiondetector, motiondetector_parte1]]

[source,cpp]
----
include::codigos/motiondetector_parte1.cpp[motiondetector_parte1.cpp]
----

Uma vez obtido os histogramas, calculamos uma media de um canal dos histogramas do frame atual e do frame anterior e as comparamos, caso a media ultrapasse um limiar, uma mensagem é imprimida no terminal.

[[exa_motiondetector, motiondetector_parte2]]

[source,cpp]
----
include::codigos/motiondetector_parte2.cpp[motiondetector_parte2.cpp]
----

Código completo abaixo.

[source,cpp]
.Listagem 5 : motiondetector.cpp
----
include::codigos/motiondetector.cpp[motiondetector.cpp]
----

=== 1.7 Questão 7

Inicialmente, no programa link:codigos/laplgauss.cpp[laplgauss.cpp], mostrado na <<exa_laplgauss1>>,
na função menu(), acrescentamos a opção do usuário digitar a tecla 'j' para escolher o filtro
Laplaciano do Gaussiano. Na função main() acrescentamos mais duas máscaras o _frameFiltered2_
e o _result1_ que serão usadas no cálculo do filtro LoG. Também acrescentamos a variável booleana
_isLoG_. No switch, _isLoG_ irá mudar de valor de acordo com a tecla apertada (filtro escolhido);
será true caso o filtro escolhido seja Laplaciano do Gaussiano (letra j) e false caso contrário
(todas as outras letras do menu).

No trecho de código a seguir, fazermos um if que irá identificar se o filtro a ser aplicado será ou
não o LoG. Se sim, ele irá aplicar a primeira máscara (gaussiana) e guardar na variável _frameFilterede_
e depois aplicar a máscara laplaciana e guardar na variável _frameFiltered2_ e logo depois convertendo
para 8 bits guardando na variável _result1_ e mostrando na tela. Caso isLoG seja falso, o processo
acontecerá normalmente (antes da modificação) com a aplicação de apenas um filtro, que é definido no switch.

[[exa_laplgauss, laplgauss_parte1]]

[source,cpp]
----
include::codigos/laplgauss_parte1.cpp[laplgauss_parte1.cpp]
----

A seguir são mostradas entrada (<<fig_laplgauss1>>) e saídas (<<fig_laplgauss2>> e <<fig_laplgauss3>>) do  _laplgauss_.

[[fig_laplgauss1, Figura 6]]
//[.text-center]
.Entrada do programa laplgauss
image::imagens/laplgauss_entrada.png[Entrada do programa laplgauss, title="Entrada do programa laplgauss"]

[[fig_laplgauss2, Figura 7]]
//[.text-center]
.Saída 1 do programa laplgauss
image::imagens/laplgauss_saida1.png[Saída 1 do programa laplgauss com filtro Laplaciano, title="Saída 1 do programa laplgauss com filtro Laplaciano"]

[[fig_laplgauss3, Figura 8]]
//[.text-center]
.Saída 2 do programa laplgauss
image::imagens/laplgauss_saida2.png[Saída 2 do programa laplgauss com filtro Laplaciano do Gaussiano, title="Saída 2 do programa laplgauss com filtro Laplaciano do Gaussiano"]

Percebemos que com a aplicação do filtro laplaciano, há um realçe nas bordas. No entanto se
antes de aplicarmos o filtro laplaciano também aplicarmos o filtro de média, percebemos que
há uma atenuação/borramento no destaque das bordas/ruídos, ou seja, as bordas aparecem ainda
menos (mais suavizadas) se comparado ao filtro simples do filtro laplaciano. Com o filtro gaussiano,
a imagem é suavizada e com o laplassiano é destacado os contornos.

A seguir o código do laplgauss.cpp.

[[exa_laplgauss1, Listagem 6]]

[source,cpp]
.Listagem 6 : laplgauss.cpp
----
include::codigos/laplgauss.cpp[laplgauss.cpp]
----

=== 1.8 Questão 8

Primeiramente criamos a função _increaseColourSaturation_ que irá regular a saturação da imagem.
Fizemos isso transformando a imagem de RGB para HSV, depois dando um ganho em V e no final fizemos
a transformação inversa para RGB.

[[exa_tiltshift_parte1, tiltshift_parte1]]

[source,cpp]
----
include::codigos/tiltshift_parte1.cpp[tiltshift_parte1.cpp]
----

Não modificamos a função _onTrackbarBlend_. Esta será responsável pela regulagem do nível de desfoque
da imagem através do parâmetro alfa.

[source,cpp]
----
include::codigos/tiltshift_parte2.cpp[tiltshift_parte2.cpp]
----

Em seguida criamos a função _OnTrackbarVert_, esta é responsável pelo ajuste da posição vertical
do centro da região que entrará em foco.

[source,cpp]
----
include::codigos/tiltshift_parte3.cpp[tiltshift_parte3.cpp]
----

Em seguida criamos a função _OnTrackbarCenter_, esta é responsável pelo ajuste da altura da região
central que entrará em foco.

[source,cpp]
----
include::codigos/tiltshift_parte4.cpp[tiltshift_parte4.cpp]
----

Por último na função _main_, lemos a imagem original e aplicamos uma máscara gaussiana para desfocar
a imagem original (filter2D) e a atribuímos na variável _desfocada_, esta é copiada para a variável
_desfCpy_ que também será usada no processo de regulagem da imagem de saída. Depois lemos a altura e
largura da imagem, estes definiram os limites dos sliders _vertical_ e _center_. Depois fazemos a saturação
da imagem original e as chamadas _createTrackbar_ para fazer os devidos ajustes.
Finalizando o programa, a imagem produzida é salva no arquivo tiltshift_saida.png.

[source,cpp]
----
include::codigos/tiltshift_parte5.cpp[tiltshift_parte5.cpp]
----

A seguir mostramos uma imagem de entrada e sua respectiva saída.

[[fig_tiltshift1, Figura 9]]
//[.text-center]
.Entrada do programa tiltshift
image::imagens/tiltshift_entrada3.jpg[Entrada do programa tiltshift, title="Entrada do programa tiltshift"]


[[fig_tiltshift2, Figura 10]]
//[.text-center]
.Saída do programa tiltshift
image::imagens/tiltshift_saida2.png[Saída do programa tiltshift, title="Saída do programa tiltshift"]

A seguir o código _tiltshift_ completo:

[[exa_tiltshift, Listagem 7]]

[source,cpp]
.Listagem 7 : tiltshift.cpp
----
include::codigos/tiltshift.cpp[tiltshift.cpp]
----


=== 1.9 Questão 9
Utilizando o código do _tiltshift.cpp_ e com algumas adaptações foi possível aplicar o tiltshift em videos. Abaixo algums videos gerados pelo programa.


.Video 1 : Original
video::videos/tiltshiftvideo_entrada.mp4[width=480]
Caso o video não abra clique link:https://github.com/pdi20161/pdi20161.github.io/blob/master/videos/tiltshiftvideo_entrada.mp4[aqui].

.Video 1 : Modificado
video::videos/tiltshiftvideo_saida.avi[width=480]
Caso o video não abra clique link:https://github.com/pdi20161/pdi20161.github.io/blob/master/videos/tiltshiftvideo_saida.avi[aqui].

.Video 2 : Original
video::videos/tiltshiftvideo_entrada2.mp4[width=480]
Caso o video não abra clique link:https://github.com/pdi20161/pdi20161.github.io/blob/master/videos/tiltshiftvideo_entrada2.mp4[aqui].

.Video 2 : Modificado
video::videos/tiltshiftvideo_saida2.avi[width=480]
Caso o video não abra clique link:https://github.com/pdi20161/pdi20161.github.io/blob/master/videos/tiltshiftvideo_saida2.avi[aqui].

A seguir o código completo.

[[exa_tiltshiftvideo, Listagem 8]]

[source,cpp]
.Listagem 8 : tiltshiftvideo.cpp
----
include::codigos/tiltshiftvideo.cpp[tiltshiftvideo.cpp]
----
