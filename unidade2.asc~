:source-highlighter: pygments
:stem:
:toc: left
:toc-title: Sumário

== 1. Exercícios da Unidade 2

=== 1.1 Questão 1

Nessa questão foi reproduzido a equação do filtro homomófico mostrado abaixo:

stem:[H(u,v) = (\gamma h - \gamma l)(1 - e^(-c((D^2 (u,v) )/(D^2 0)))) + \gamma l]

A seguir a implementação dessa equação em C++;

[source,cpp]
.filtro_homomofico_parte1.cpp
----
include::codigos/filtro_homomofico_parte1.cpp[filtro_homomofico_parte1.cpp]
----

Utilizando os parametros
stem:[\gamma h = 68, \gamma l = 7, C = 76 e D0 = 30]
Na imagem a seguir:

//[.text-center]
.Programa filtro_homomofico.cpp
image::imagens/filtro_homomorfico_entrada.png[Entrada do programa filtro_homomofico, title="Entrada do programa filtro_homomofico"]

obtemos o seguinte resultado
//[.text-center]
.Saida do programa filtro_homomofico.cpp
image::imagens/filtro_homomorfico_saida.png[Saida do programa filtro_homomofico, title="Saída do programa filtro_homomofico"]

A seguir o código completo:

[source,cpp]
.filtro_homomofico.cpp
----
include::codigos/filtro_homomofico.cpp[filtro_homomofico.cpp]
----

=== 1.1 Questão 2

Para essa questão, foi utilizado como base o código pontilhismo.cpp. +
Inicialmente, no programa link:codigos/canny_pont.cpp[canny_pont.cpp],
utilizamos as variáveis _gauss_, _mask_, _mask1_ e _blur_ para realizar o
borramento da imagem original capturada em  _image_, através da função filter2D.
O resultado do borramento é posto na variável _blur_.
[source,cpp]
----
include::codigos/canny_pont_parte1.cpp[canny_pont_parte1.cpp]
----

Em seguida copiamos a imagem borrada para a variável _points_. No trecho
de código a seguir, são escolhidos aleatoriamente pontos na imagem e nesses
pontos são desenhados círculos de raio igual a 5 pixels em cima da imagem
borrada em _points_.

[source,cpp]
----
include::codigos/canny_pont_parte2.cpp[canny_pont_parte2.cpp]
----

Depois fazemos um for de 1 a 4, que terá como objetivo realizar o algoritmo
de Canny 4 vezes. Para cada iteração são aumentados os limiares do algoritmo
(escolhemos o limitar T1 variando de 50 a 200 com um passo de 50 e T2 sendo
o triplo de T1). Cada iteração terá então uma respectiva imagem de Canny
diferente e com cada vez menos bordas. Percorremos a imagem e verificamos
se o tom do pixel é maior que 0 (significa que é uma borda e não o fundo da imagem).
A medida que os pixels de borda forem passando pelo teste, serão desenhados
círculos de raio igual a 4, 3, 2 e 1 para cada iteração do for mais externo.
No final, teremos o resultado do pontilhismo na variável _point_.

[source,cpp]
----
include::codigos/canny_pont_parte3.cpp[canny_pont_parte3.cpp]
----

Para a seguite entrada do programa _cannyPont_:

//[.text-center]
.Entrada do programa canny_pont
image::imagens/entrada_canny_pont.bmp[Entrada do programa canny_pont, title="Entrada do programa canny_pont"]

Temos a seguinte saída:

//[.text-center]
.Saída do programa canny_pont
image::imagens/saida_canny_pont.jpg[Saida do programa canny_pont, title="Saída do programa canny_pont"]

A seguir o código completo:

[source,cpp]
.canny_pont.cpp
----
include::codigos/canny_pont.cpp[canny_pont.cpp]
----
